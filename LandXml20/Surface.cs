//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime: <..>
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

#if !BUILD_LAND_XML
using System;
using System.IO;
using System.Text;
using System.Collections.Generic;
using XmlSchemaProcessor.Common;

namespace XmlSchemaProcessor.LandXml20
{

    /// <summary>
    /// SourceData is an optional collection of the points, contours, breaklines and boundaries that were used to create the surface.
    /// Definition is a collection of points and faces that define the surface.
    /// Watersheds is a collection the watershed boundaries for the surface.
    /// Sequence [1, 1]
    ///     Choice [1, 3]
    ///         SourceData [0, 1]
    ///         Definition [0, 1]
    ///         Watersheds [0, 1]
    ///     Feature [0, *]
    /// </summary>

    public class Surface : XsdBaseReader
    {
        public Surface(System.Xml.XmlReader reader) : base(reader)
        {
        }

        public string Name;

        public string Desc;

        public string OID;

        public StateType? State;

        #region XsdBaseReader

        protected override bool NewReader(string namespaceURI, string name)
        {
            if (name.EqualsIgnoreCase("Feature"))
            {
                this.SetCurrent("Feature", this.NewReader<Feature>());
                return true;
            }
            if (name.EqualsIgnoreCase("Watersheds"))
            {
                this.SetCurrent("Watersheds", this.NewReader<Watersheds>());
                return true;
            }
            if (name.EqualsIgnoreCase("Definition"))
            {
                this.SetCurrent("Definition", this.NewReader<Definition>());
                return true;
            }
            if (name.EqualsIgnoreCase("SourceData"))
            {
                this.SetCurrent("SourceData", this.NewReader<SourceData>());
                return true;
            }

            return base.NewReader(namespaceURI, name);
        }

        #endregion

        #region XsdBaseObject

        public override bool Read(IDictionary<string, string> attributes, string text)
        {
            base.Read(attributes, text);

            this.Name = XsdConverter.Instance.Convert<string>(
                    attributes.GetSafe("name"));

            this.Desc = XsdConverter.Instance.Convert<string>(
                    attributes.GetSafe("desc"));

            this.OID = XsdConverter.Instance.Convert<string>(
                    attributes.GetSafe("OID"));

            this.State = XsdConverter.Instance.Convert<StateType?>(
                    attributes.GetSafe("state"));

            return true;
        }

        public override string ToAttributes()
        {
            AttributesBuilder buff = new AttributesBuilder(base.ToAttributes());

            if ((object)this.Name != null)
            {
                buff.Append("name", this.Name);
            }
            if ((object)this.Desc != null)
            {
                buff.Append("desc", this.Desc);
            }
            if ((object)this.OID != null)
            {
                buff.Append("OID", this.OID);
            }
            if ((object)this.State != null)
            {
                buff.Append("state", this.State);
            }

            return buff.ToString();
        }

        #endregion

        #region object

        public override string ToString()
        {
            StringBuilder buff = new StringBuilder(base.ToString());

            if ((object)this.Name != null)
            {
                buff.AppendFormat("name = {0}", this.Name).AppendLine();
            }
            if ((object)this.Desc != null)
            {
                buff.AppendFormat("desc = {0}", this.Desc).AppendLine();
            }
            if ((object)this.OID != null)
            {
                buff.AppendFormat("OID = {0}", this.OID).AppendLine();
            }
            if ((object)this.State != null)
            {
                buff.AppendFormat("state = {0}", this.State).AppendLine();
            }

            return buff.ToString();
        }

        #endregion
    }
}
#endif
