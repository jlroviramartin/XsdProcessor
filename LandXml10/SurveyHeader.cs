//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime: <..>
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

#if !BUILD_LAND_XML
using System;
using System.IO;
using System.Text;
using System.Collections.Generic;
using XmlSchemaProcessor.Common;

namespace XmlSchemaProcessor.LandXml10
{

    /// <summary>
    /// We seemed to have doubled up on the survey purpose here, but the two are quite different - maybe need a different name
    /// Choice [0, *]
    ///     CoordinateSystem [0, 1]
    ///     Units [0, 1]
    ///     MapPoint [0, *]
    ///     Personnel [0, *]
    ///     FieldNote [0, *]
    ///     Feature [0, *]
    /// </summary>

    public class SurveyHeader : XsdBaseReader
    {
        public SurveyHeader(System.Xml.XmlReader reader) : base(reader)
        {
        }

        public string Name;

        public string Desc;
        /// <summary>
        /// Used by many of the Survey elements
        /// </summary>

        public PurposeType? Purpose;

        public DateTime? StartTime;

        public DateTime? EndTime;

        public string Surveyor;

        public string SurveyorFirm;

        public string SurveyorReference;

        public string SurveyorRegistration;

        public string SurveyPurpose;
        /// <summary>
        /// This enumeration indicates whether the survey was acutally performed in the field, compiled from a series of existing surveys, or simply computed using known observations and maths
        /// </summary>

        public SurveyType? Type;

        public string Class;

        public string County;

        public bool? ApplyAtmosphericCorrection;

        public double? Pressure;

        public double? Temperature;

        public bool? ApplySeaLevelCorrection;

        public double? ScaleFactor;

        public double? SeaLevelCorrectionFactor;

        public double? CombinedFactor;

        #region XsdBaseReader

        protected override bool NewReader(string namespaceURI, string name)
        {
            if (name.EqualsIgnoreCase("Feature"))
            {
                this.SetCurrent("Feature", this.NewReader<Feature>());
                return true;
            }
            if (name.EqualsIgnoreCase("FieldNote"))
            {
                this.SetCurrent("FieldNote", this.NewReader<FieldNote>());
                return true;
            }
            if (name.EqualsIgnoreCase("Personnel"))
            {
                this.SetCurrent("Personnel", this.NewReader<Personnel>());
                return true;
            }
            if (name.EqualsIgnoreCase("MapPoint"))
            {
                this.SetCurrent("MapPoint", this.NewReader<PointType>());
                return true;
            }
            if (name.EqualsIgnoreCase("Units"))
            {
                this.SetCurrent("Units", this.NewReader<Units>());
                return true;
            }
            if (name.EqualsIgnoreCase("CoordinateSystem"))
            {
                this.SetCurrent("CoordinateSystem", this.NewReader<CoordinateSystem>());
                return true;
            }

            return base.NewReader(namespaceURI, name);
        }

        #endregion

        #region XsdBaseObject

        public override bool Read(IDictionary<string, string> attributes, string text)
        {
            base.Read(attributes, text);

            this.Name = XsdConverter.Instance.Convert<string>(
                    attributes.GetSafe("name"));

            this.Desc = XsdConverter.Instance.Convert<string>(
                    attributes.GetSafe("desc"));

            this.Purpose = XsdConverter.Instance.Convert<PurposeType?>(
                    attributes.GetSafe("purpose"));

            this.StartTime = XsdConverter.Instance.Convert<DateTime?>(
                    attributes.GetSafe("startTime"));

            this.EndTime = XsdConverter.Instance.Convert<DateTime?>(
                    attributes.GetSafe("endTime"));

            this.Surveyor = XsdConverter.Instance.Convert<string>(
                    attributes.GetSafe("surveyor"));

            this.SurveyorFirm = XsdConverter.Instance.Convert<string>(
                    attributes.GetSafe("surveyorFirm"));

            this.SurveyorReference = XsdConverter.Instance.Convert<string>(
                    attributes.GetSafe("surveyorReference"));

            this.SurveyorRegistration = XsdConverter.Instance.Convert<string>(
                    attributes.GetSafe("surveyorRegistration"));

            this.SurveyPurpose = XsdConverter.Instance.Convert<string>(
                    attributes.GetSafe("surveyPurpose"));

            this.Type = XsdConverter.Instance.Convert<SurveyType?>(
                    attributes.GetSafe("type"));

            this.Class = XsdConverter.Instance.Convert<string>(
                    attributes.GetSafe("class"));

            this.County = XsdConverter.Instance.Convert<string>(
                    attributes.GetSafe("county"));

            this.ApplyAtmosphericCorrection = XsdConverter.Instance.Convert<bool?>(
                    attributes.GetSafe("applyAtmosphericCorrection"));

            this.Pressure = XsdConverter.Instance.Convert<double?>(
                    attributes.GetSafe("pressure"));

            this.Temperature = XsdConverter.Instance.Convert<double?>(
                    attributes.GetSafe("temperature"));

            this.ApplySeaLevelCorrection = XsdConverter.Instance.Convert<bool?>(
                    attributes.GetSafe("applySeaLevelCorrection"));

            this.ScaleFactor = XsdConverter.Instance.Convert<double?>(
                    attributes.GetSafe("scaleFactor"));

            this.SeaLevelCorrectionFactor = XsdConverter.Instance.Convert<double?>(
                    attributes.GetSafe("seaLevelCorrectionFactor"));

            this.CombinedFactor = XsdConverter.Instance.Convert<double?>(
                    attributes.GetSafe("combinedFactor"));

            return true;
        }

        public override string ToAttributes()
        {
            AttributesBuilder buff = new AttributesBuilder(base.ToAttributes());

            if ((object)this.Name != null)
            {
                buff.Append("name", this.Name);
            }
            if ((object)this.Desc != null)
            {
                buff.Append("desc", this.Desc);
            }
            if ((object)this.Purpose != null)
            {
                buff.Append("purpose", this.Purpose);
            }
            if ((object)this.StartTime != null)
            {
                buff.Append("startTime", this.StartTime);
            }
            if ((object)this.EndTime != null)
            {
                buff.Append("endTime", this.EndTime);
            }
            if ((object)this.Surveyor != null)
            {
                buff.Append("surveyor", this.Surveyor);
            }
            if ((object)this.SurveyorFirm != null)
            {
                buff.Append("surveyorFirm", this.SurveyorFirm);
            }
            if ((object)this.SurveyorReference != null)
            {
                buff.Append("surveyorReference", this.SurveyorReference);
            }
            if ((object)this.SurveyorRegistration != null)
            {
                buff.Append("surveyorRegistration", this.SurveyorRegistration);
            }
            if ((object)this.SurveyPurpose != null)
            {
                buff.Append("surveyPurpose", this.SurveyPurpose);
            }
            if ((object)this.Type != null)
            {
                buff.Append("type", this.Type);
            }
            if ((object)this.Class != null)
            {
                buff.Append("class", this.Class);
            }
            if ((object)this.County != null)
            {
                buff.Append("county", this.County);
            }
            if ((object)this.ApplyAtmosphericCorrection != null)
            {
                buff.Append("applyAtmosphericCorrection", this.ApplyAtmosphericCorrection);
            }
            if ((object)this.Pressure != null)
            {
                buff.Append("pressure", this.Pressure);
            }
            if ((object)this.Temperature != null)
            {
                buff.Append("temperature", this.Temperature);
            }
            if ((object)this.ApplySeaLevelCorrection != null)
            {
                buff.Append("applySeaLevelCorrection", this.ApplySeaLevelCorrection);
            }
            if ((object)this.ScaleFactor != null)
            {
                buff.Append("scaleFactor", this.ScaleFactor);
            }
            if ((object)this.SeaLevelCorrectionFactor != null)
            {
                buff.Append("seaLevelCorrectionFactor", this.SeaLevelCorrectionFactor);
            }
            if ((object)this.CombinedFactor != null)
            {
                buff.Append("combinedFactor", this.CombinedFactor);
            }

            return buff.ToString();
        }

        #endregion

        #region object

        public override string ToString()
        {
            StringBuilder buff = new StringBuilder(base.ToString());

            if ((object)this.Name != null)
            {
                buff.AppendFormat("name = {0}", this.Name).AppendLine();
            }
            if ((object)this.Desc != null)
            {
                buff.AppendFormat("desc = {0}", this.Desc).AppendLine();
            }
            if ((object)this.Purpose != null)
            {
                buff.AppendFormat("purpose = {0}", this.Purpose).AppendLine();
            }
            if ((object)this.StartTime != null)
            {
                buff.AppendFormat("startTime = {0}", this.StartTime).AppendLine();
            }
            if ((object)this.EndTime != null)
            {
                buff.AppendFormat("endTime = {0}", this.EndTime).AppendLine();
            }
            if ((object)this.Surveyor != null)
            {
                buff.AppendFormat("surveyor = {0}", this.Surveyor).AppendLine();
            }
            if ((object)this.SurveyorFirm != null)
            {
                buff.AppendFormat("surveyorFirm = {0}", this.SurveyorFirm).AppendLine();
            }
            if ((object)this.SurveyorReference != null)
            {
                buff.AppendFormat("surveyorReference = {0}", this.SurveyorReference).AppendLine();
            }
            if ((object)this.SurveyorRegistration != null)
            {
                buff.AppendFormat("surveyorRegistration = {0}", this.SurveyorRegistration).AppendLine();
            }
            if ((object)this.SurveyPurpose != null)
            {
                buff.AppendFormat("surveyPurpose = {0}", this.SurveyPurpose).AppendLine();
            }
            if ((object)this.Type != null)
            {
                buff.AppendFormat("type = {0}", this.Type).AppendLine();
            }
            if ((object)this.Class != null)
            {
                buff.AppendFormat("class = {0}", this.Class).AppendLine();
            }
            if ((object)this.County != null)
            {
                buff.AppendFormat("county = {0}", this.County).AppendLine();
            }
            if ((object)this.ApplyAtmosphericCorrection != null)
            {
                buff.AppendFormat("applyAtmosphericCorrection = {0}", this.ApplyAtmosphericCorrection).AppendLine();
            }
            if ((object)this.Pressure != null)
            {
                buff.AppendFormat("pressure = {0}", this.Pressure).AppendLine();
            }
            if ((object)this.Temperature != null)
            {
                buff.AppendFormat("temperature = {0}", this.Temperature).AppendLine();
            }
            if ((object)this.ApplySeaLevelCorrection != null)
            {
                buff.AppendFormat("applySeaLevelCorrection = {0}", this.ApplySeaLevelCorrection).AppendLine();
            }
            if ((object)this.ScaleFactor != null)
            {
                buff.AppendFormat("scaleFactor = {0}", this.ScaleFactor).AppendLine();
            }
            if ((object)this.SeaLevelCorrectionFactor != null)
            {
                buff.AppendFormat("seaLevelCorrectionFactor = {0}", this.SeaLevelCorrectionFactor).AppendLine();
            }
            if ((object)this.CombinedFactor != null)
            {
                buff.AppendFormat("combinedFactor = {0}", this.CombinedFactor).AppendLine();
            }

            return buff.ToString();
        }

        #endregion
    }
}
#endif
