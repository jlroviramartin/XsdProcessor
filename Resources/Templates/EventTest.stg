delimiters "$", "$"

BuildEnum(enumType, enumValues) ::= <<
$enumType; format="NetDocumentation"$
public enum $enumType.Name; format="TypeName"$
{
    $enumValues:{enumValue | $BuildValue(enumValue)$}$
}

>>

BuildValue(enumValue) ::= <<
[StringValue("$enumValue$")]
$enumValue; format="EnumValueName"$,

>>

BuildType(documentation, typeName, baseType, attributes, includeContent, contentType, contentFieldName="Content") ::= <<
$documentation; format="NetDocumentation"$
public class $typeName$ : $baseType$
{
    public override bool Read(IDictionary<string, string> attributes, string text)
    {
        base.Read(attributes, text);

        $attributes.Content:{attribute | $ReadAttribute(attribute)$}$

        $if(includeContent)$
        this.$contentFieldName$ = XsdConverter.Instance.Convert<$contentType; format="NetType"$>(text);
        $endif$

        return true;
    }

    public override string ToString()
    {
        System.Text.StringBuilder buff = new System.Text.StringBuilder();
        buff.AppendLine(base.ToString());

        $attributes.Content:{attribute | $AttributeToString(attribute)$}$

        $if(includeContent)$
        buff.Append("$contentFieldName$ = ").AppendLine(this.$contentFieldName$);
        $endif$

        return buff.ToString();
    }

    $attributes.Content:{attribute | $AttributeAsProperty(attribute)$}$

    $if(includeContent)$
    public $contentType; format="NetType"$ $contentFieldName$;
    $endif$
}

>>

ReadAttribute(attribute) ::= <<
$if(attribute.DefValue)$
this.$attribute.Name; format="FieldName"$ = XsdConverter.Instance.Convert<$attribute; format="NetType"$>(
        attributes.GetSafe("$attribute.Name$"),
        XsdConverter.Instance.Convert<$attribute; format="NetType"$>("$attribute.DefValue$"));
$else$
this.$attribute.Name; format="FieldName"$ = XsdConverter.Instance.Convert<$attribute; format="NetType"$>(
        attributes.GetSafe("$attribute.Name$"));
$endif$

>>

AttributeToString(attribute) ::= <<
$if(attribute.DefValue)$
buff.Append("$attribute.Name$ = ").Append(this.$attribute.Name; format="FieldName"$).AppendLine(" defvalue = $attribute.DefValue$");
$else$
buff.Append("$attribute.Name$ = ").AppendLine(this.$attribute.Name; format="FieldName"$);
$endif$

>>

AttributeAsProperty(attribute) ::= <<
$attribute; format="NetDocumentation"$
public $attribute; format="NetType"$ $attribute.Name; format="FieldName"$;

>>


XmlReader(namespacesURI, events) ::= <<
// Clase reader.
public class LandXmlReader : SimpleReader
{
    public LandXmlReader(ILandXmlEvents events)
        : base($namespacesURI: {uri | "$uri$"}; separator=", "$)
    {
        $events:{x | $EventRegister(x)$}$
    }
}

>>

EventsInterface(events) ::= <<
// Clase para los eventos.
public interface ILandXmlEvents
{
    $events:{x | $EventInterface(x)$}$
}

>>

EventsImplementation(events) ::= <<
// Clase para los eventos.
public class LandXmlEvents : ILandXmlEvents
{
    $events:{x | $EventEmptyImplementation(x)$}$
}

>>

EventsTest(events) ::= <<
/// <summary>
/// Event test class.
/// </summary>
public class TestLandXmlEvents : ILandXmlEvents
{
    public bool AsXml { get; set; }

    // DebugWrite
    public void DebugWrite(string outFile)
    {
        using (FileStream fstream = new FileInfo(outFile).Open(FileMode.Create, FileAccess.Write))
        using (StreamWriter stream = new StreamWriter(fstream))
        using (TextWriterEx writer = new TextWriterEx(stream))
        {
            writer.WriteLine(this.buff.Inner);
        }
    }

    private readonly TextWriterEx buff = new TextWriterEx(new StringWriter());

    $events:{x | $EventTest(x)$}$
}

>>

EventRegister(simpleEvent) ::= <<
this.Register<$simpleEvent.ArgType$>("$simpleEvent.Name$",
        events.BeginRead$simpleEvent.Name; format="FirstUpper"$,
        events.EndRead$simpleEvent.Name; format="FirstUpper"$,
        $simpleEvent.NeedContent$);

>>

EventInterface(simpleEvent) ::= <<
$simpleEvent.Documentation; format="NetDocumentation"$
void BeginRead$simpleEvent.Name; format="FirstUpper"$( $simpleEvent.ArgType$ value );
void EndRead$simpleEvent.Name; format="FirstUpper"$();

>>

EventEmptyImplementation(simpleEvent) ::= <<
public virtual void BeginRead$simpleEvent.Name; format="FirstUpper"$( $simpleEvent.ArgType$ value ) { }
public virtual void EndRead$simpleEvent.Name; format="FirstUpper"$() { }

>>

EventTest(simpleEvent) ::= <<
public virtual void BeginRead$simpleEvent.Name; format="FirstUpper"$( $simpleEvent.ArgType$ value )
{
    // BeginRead
    if (this.AsXml)
    {
        buff.WriteLine("<$simpleEvent.Name; format="FirstUpper"$>");
        buff.Indent();
    }
    else
    {
        buff.WriteLine("BeginRead $simpleEvent.Name; format="FirstUpper"$");
        buff.Indent();
        buff.WriteLine(value);
        buff.Indent();
    }
}

public virtual void EndRead$simpleEvent.Name; format="FirstUpper"$()
{
    if (this.AsXml)
    {
        buff.Unindent();
        buff.WriteLine("</$simpleEvent.Name; format="FirstUpper"$>");
    }
    else
    {
        buff.Unindent();
        buff.Unindent();
        buff.WriteLine("EndRead $simpleEvent.Name; format="FirstUpper"$");
    }
}

>>
