//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime: <..>
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

#if !BUILD_LAND_XML
using System;
using System.IO;
using System.Collections.Generic;
using XmlSchemaProcessor.Processors;

namespace XmlSchemaProcessor.LandXml12
{

    /// <summary>
    /// Sequence [1, 1]
    ///     Choice [0, *]
    ///         Monument [0, *]
    ///         FieldNote [0, *]
    ///         Feature [0, *]
    /// </summary>

    public class GPSAntennaDetails : XsdBaseReader
    {
        public GPSAntennaDetails(System.Xml.XmlReader reader) : base(reader)
        {
        }

        public string Id;

        public string Manufacturer;

        public string Model;

        public string SerialNumber;

        public double? Latitude;

        public double? Longitude;

        public double? Altitude;

        public double? EllipsiodalHeight;

        public double? OrthometricHeight;

        #region XsdBaseReader

        protected override Tuple<string, object> NewReader(string namespaceURI, string name)
        {
            if (name.EqualsIgnoreCase("Feature"))
            {
                return Tuple.Create("Feature", this.NewReader<Feature>());
            }
            if (name.EqualsIgnoreCase("FieldNote"))
            {
                return Tuple.Create("FieldNote", this.NewReader<FieldNote>());
            }
            if (name.EqualsIgnoreCase("Monument"))
            {
                return Tuple.Create("Monument", this.NewReader<Monument>());
            }

            return base.NewReader(namespaceURI, name);
        }

        #endregion

        #region XsdBaseObject

        public override bool Read(IDictionary<string, string> attributes, string text)
        {
            base.Read(attributes, text);

            this.Id = XsdConverter.Instance.Convert<string>(
                    attributes.GetSafe("id"));

            this.Manufacturer = XsdConverter.Instance.Convert<string>(
                    attributes.GetSafe("manufacturer"));

            this.Model = XsdConverter.Instance.Convert<string>(
                    attributes.GetSafe("model"));

            this.SerialNumber = XsdConverter.Instance.Convert<string>(
                    attributes.GetSafe("serialNumber"));

            this.Latitude = XsdConverter.Instance.Convert<double?>(
                    attributes.GetSafe("latitude"));

            this.Longitude = XsdConverter.Instance.Convert<double?>(
                    attributes.GetSafe("longitude"));

            this.Altitude = XsdConverter.Instance.Convert<double?>(
                    attributes.GetSafe("altitude"));

            this.EllipsiodalHeight = XsdConverter.Instance.Convert<double?>(
                    attributes.GetSafe("ellipsiodalHeight"));

            this.OrthometricHeight = XsdConverter.Instance.Convert<double?>(
                    attributes.GetSafe("orthometricHeight"));

            return true;
        }

        public override string ToAttributes()
        {
            XmlSchemaProcessor.Processors.AttributesBuilder buff = new XmlSchemaProcessor.Processors.AttributesBuilder(base.ToAttributes());

            if ((object)this.Id != null)
            {
                buff.Append("id", this.Id);
            }
            if ((object)this.Manufacturer != null)
            {
                buff.Append("manufacturer", this.Manufacturer);
            }
            if ((object)this.Model != null)
            {
                buff.Append("model", this.Model);
            }
            if ((object)this.SerialNumber != null)
            {
                buff.Append("serialNumber", this.SerialNumber);
            }
            if ((object)this.Latitude != null)
            {
                buff.Append("latitude", this.Latitude);
            }
            if ((object)this.Longitude != null)
            {
                buff.Append("longitude", this.Longitude);
            }
            if ((object)this.Altitude != null)
            {
                buff.Append("altitude", this.Altitude);
            }
            if ((object)this.EllipsiodalHeight != null)
            {
                buff.Append("ellipsiodalHeight", this.EllipsiodalHeight);
            }
            if ((object)this.OrthometricHeight != null)
            {
                buff.Append("orthometricHeight", this.OrthometricHeight);
            }

            return buff.ToString();
        }

        #endregion

        #region object

        public override string ToString()
        {
            System.Text.StringBuilder buff = new System.Text.StringBuilder(base.ToString());

            if ((object)this.Id != null)
            {
                buff.AppendFormat("id = {0}", this.Id).AppendLine();
            }
            if ((object)this.Manufacturer != null)
            {
                buff.AppendFormat("manufacturer = {0}", this.Manufacturer).AppendLine();
            }
            if ((object)this.Model != null)
            {
                buff.AppendFormat("model = {0}", this.Model).AppendLine();
            }
            if ((object)this.SerialNumber != null)
            {
                buff.AppendFormat("serialNumber = {0}", this.SerialNumber).AppendLine();
            }
            if ((object)this.Latitude != null)
            {
                buff.AppendFormat("latitude = {0}", this.Latitude).AppendLine();
            }
            if ((object)this.Longitude != null)
            {
                buff.AppendFormat("longitude = {0}", this.Longitude).AppendLine();
            }
            if ((object)this.Altitude != null)
            {
                buff.AppendFormat("altitude = {0}", this.Altitude).AppendLine();
            }
            if ((object)this.EllipsiodalHeight != null)
            {
                buff.AppendFormat("ellipsiodalHeight = {0}", this.EllipsiodalHeight).AppendLine();
            }
            if ((object)this.OrthometricHeight != null)
            {
                buff.AppendFormat("orthometricHeight = {0}", this.OrthometricHeight).AppendLine();
            }

            return buff.ToString();
        }

        #endregion
    }
}
#endif
