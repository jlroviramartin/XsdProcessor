//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime: <..>
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

#if !BUILD_LAND_XML
using System;
using System.IO;
using System.Text;
using System.Collections.Generic;
using XmlSchemaProcessor.Common;

namespace XmlSchemaProcessor.LandXml12
{

    /// <summary>
    /// The collection of faces and points that defined the surface.
    /// Sequence [1, 1]
    ///     Pnts [1, 1]
    ///     Faces [1, *]
    ///     Feature [0, *]
    /// </summary>

    public class Definition : XsdBaseReader
    {
        public Definition(System.Xml.XmlReader reader) : base(reader)
        {
        }

        /// <summary>
        /// TIN is the acronym for "triangulated irregular network", a surface comprised of 3 point faces
        /// grid is a surface comprised of 4 point faces.
        /// </summary>

        public SurfTypeEnum SurfType;

        public double? Area2DSurf;

        public double? Area3DSurf;

        public double? ElevMax;

        public double? ElevMin;

        #region XsdBaseReader

        protected override bool NewReader(string namespaceURI, string name)
        {
            if (name.EqualsIgnoreCase("Feature"))
            {
                this.SetCurrent("Feature", this.NewReader<Feature>());
                return true;
            }
            if (name.EqualsIgnoreCase("Faces"))
            {
                this.SetCurrent("Faces", this.NewReader<Faces>());
                return true;
            }
            if (name.EqualsIgnoreCase("Pnts"))
            {
                this.SetCurrent("Pnts", this.NewReader<Pnts>());
                return true;
            }

            return base.NewReader(namespaceURI, name);
        }

        #endregion

        #region XsdBaseObject

        public override bool Read(IDictionary<string, string> attributes, string text)
        {
            base.Read(attributes, text);

            this.SurfType = XsdConverter.Instance.Convert<SurfTypeEnum>(
                    attributes.GetSafe("surfType"));

            this.Area2DSurf = XsdConverter.Instance.Convert<double?>(
                    attributes.GetSafe("area2DSurf"));

            this.Area3DSurf = XsdConverter.Instance.Convert<double?>(
                    attributes.GetSafe("area3DSurf"));

            this.ElevMax = XsdConverter.Instance.Convert<double?>(
                    attributes.GetSafe("elevMax"));

            this.ElevMin = XsdConverter.Instance.Convert<double?>(
                    attributes.GetSafe("elevMin"));

            return true;
        }

        public override string ToAttributes()
        {
            AttributesBuilder buff = new AttributesBuilder(base.ToAttributes());

            if ((object)this.SurfType != null)
            {
                buff.Append("surfType", this.SurfType);
            }
            if ((object)this.Area2DSurf != null)
            {
                buff.Append("area2DSurf", this.Area2DSurf);
            }
            if ((object)this.Area3DSurf != null)
            {
                buff.Append("area3DSurf", this.Area3DSurf);
            }
            if ((object)this.ElevMax != null)
            {
                buff.Append("elevMax", this.ElevMax);
            }
            if ((object)this.ElevMin != null)
            {
                buff.Append("elevMin", this.ElevMin);
            }

            return buff.ToString();
        }

        #endregion

        #region object

        public override string ToString()
        {
            StringBuilder buff = new StringBuilder(base.ToString());

            if ((object)this.SurfType != null)
            {
                buff.AppendFormat("surfType = {0}", this.SurfType).AppendLine();
            }
            if ((object)this.Area2DSurf != null)
            {
                buff.AppendFormat("area2DSurf = {0}", this.Area2DSurf).AppendLine();
            }
            if ((object)this.Area3DSurf != null)
            {
                buff.AppendFormat("area3DSurf = {0}", this.Area3DSurf).AppendLine();
            }
            if ((object)this.ElevMax != null)
            {
                buff.AppendFormat("elevMax = {0}", this.ElevMax).AppendLine();
            }
            if ((object)this.ElevMin != null)
            {
                buff.AppendFormat("elevMin = {0}", this.ElevMin).AppendLine();
            }

            return buff.ToString();
        }

        #endregion
    }
}
#endif
